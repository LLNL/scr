PROJECT(SCR)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

set(SCR_MAJOR_VERSION 1)
set(SCR_MINOR_VERSION 1)
set(SCR_PATCH_VERSION 8)
set(SCR_VERSION "${SCR_MAJOR_VERSION}.${SCR_MINOR_VERSION}.${SCR_PATCH_VERSION}")

# Configuration Options

SET(SCR_RESOURCE_MANAGER "SLURM" CACHE STRING "Resource Manager for CLI")
SET_PROPERTY(CACHE SCR_RESOURCE_MANAGER PROPERTY STRINGS SLURM APRUN PMIx LSF None)

SET(SCR_ASYNC_API "None" CACHE STRING "Vendor-specific asynchronous file transfer")
SET_PROPERTY(CACHE SCR_ASYNC_API PROPERTY STRINGS None Cray_DataWarp Intel_CPPR)

OPTION(ENABLE_FORTRAN "Turn Fortran Support ON/OFF" OFF)
IF(ENABLE_FORTRAN)
	SET(HAVE_FORTRAN_API TRUE)
ENDIF(ENABLE_FORTRAN)

SET(SCR_CACHE_BASE "/tmp" CACHE PATH "Default base path for SCR cache directory")
SET(SCR_CNTL_BASE "/tmp" CACHE PATH "Default base path for SCR control directory")
SET(SCR_CONFIG_FILE "/etc/scr/scr.conf" CACHE FILEPATH "Default full path and filename for SCR config file")

SET(SCR_FILE_LOCK "FLOCK" CACHE STRING "Specify type of file locking to use")
SET_PROPERTY(CACHE SCR_FILE_LOCK PROPERTY STRINGS FLOCK FCNTL NONE)

# Find Packages & Files

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

## MPI
INCLUDE(SetupMPI)
INCLUDE_DIRECTORIES(${MPI_C_INCLUDE_PATH})

## HEADERS
INCLUDE(CheckIncludeFile)
CHECK_INCLUDE_FILE(byteswap.h HAVE_BYTESWAP_H)

## libdtcmp
FIND_PACKAGE(DTCMP QUIET)
IF(DTCMP_FOUND)
	SET(HAVE_LIBDTCMP TRUE)
	LIST(APPEND SCR_EXTERNAL_LIBS ${DTCMP_LIBRARIES})
ENDIF(DTCMP_FOUND)

## libyogrt
FIND_PACKAGE(YOGRT QUIET)
IF(YOGRT_FOUND)
	SET(HAVE_LIBYOGRT TRUE)
	LIST(APPEND SCR_EXTERNAL_LIBS ${YOGRT_LIBRARIES})
ENDIF(YOGRT_FOUND)

## mySQL
FIND_PACKAGE(MYSQL QUIET)
IF(MYSQL_FOUND)
	SET(HAVE_LIBMYSQLCLIENT TRUE)
	LIST(APPEND SCR_EXTERNAL_LIBS ${MYSQL_LIBRARIES})
ENDIF(MYSQL_FOUND)

## PMIx
IF(${SCR_RESOURCE_MANAGER} STREQUAL "PMIx")
	FIND_PACKAGE(PMIX REQUIRED)
	SET(HAVE_PMIX TRUE)
	LIST(APPEND SCR_EXTERNAL_LIBS ${PMIX_LIBRARIES})
ENDIF(${SCR_RESOURCE_MANAGER} STREQUAL "PMIx")

## CPPR
IF(${SCR_ASYNC_API} STREQUAL "CPPR")
	FIND_PACKAGE(CPPR REQUIRED)
	SET(HAVE_CPPR TRUE)
	LIST(APPEND SCR_EXTERNAL_LIBS ${CPPR_LIBRARIES})
ENDIF(${SCR_ASYNC_API} STREQUAL "CPPR")

## DataWarp
## TODO: do we need to find the library? or just the header file?
## USE ONE OF
# CHECK_INCLUDE_FILE(datawarp.h HAVE_DATAWARP)
## OR
# IF(${SCR_ASYNC_API} STREQUAL "Cray_DataWarp")
# 	FIND_PACKAGE(DATAWARP REQUIRED)
# 	SET(HAVE_DATAWARP TRUE)
# 	LIST(APPEND SCR_EXTERNAL_LIBS ${DATAWARP_LIBRARIES})
# ENDIF(${SCR_ASYNC_API} STREQUAL "Cray_DataWarp")

# Subdirectories

ADD_SUBDIRECTORY(man)
ADD_SUBDIRECTORY(scripts)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(doc)
ADD_SUBDIRECTORY(examples)

# Generate config.h with all our build #defs
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/cmake/config.h.in ${PROJECT_BINARY_DIR}/config.h)
SET_SOURCE_FILES_PROPERTIES(config.h.in PROPERTIES GENERATED FALSE)
SET_SOURCE_FILES_PROPERTIES(${PROJECT_BINARY_DIR}/config.h PROPERTIES GENERATED TRUE)

# Package
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Scalable Checkpoint / Restart Library")
SET(CPACK_PACKAGE_VENDOR "Lawrence Livermore National Laboratory")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${PROJECT_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE.TXT")
SET(CPACK_PACKAGE_VERSION_MAJOR ${SCR_MAJOR_VERSION})
SET(CPACK_PACKAGE_VERSION_MINOR ${SCR_MINOR_VERSION})
SET(CPACK_PACKAGE_VERSION_PATCH ${SCR_PATCH_VERSION})
# SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
# IF(WIN32 AND NOT UNIX)
#   # There is a bug in NSI that does not handle full unix paths properly. Make
#   # sure there is at least one set of four (4) backlasshes.
#   SET(CPACK_PACKAGE_ICON "${CMake_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp")
#   SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\MyExecutable.exe")
#   SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} My Famous Project")
#   SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.my-project-home-page.org")
#   SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.my-personal-home-page.com")
#   SET(CPACK_NSIS_CONTACT "me@my-personal-home-page.com")
#   SET(CPACK_NSIS_MODIFY_PATH ON)
# ELSE(WIN32 AND NOT UNIX)
#   SET(CPACK_STRIP_FILES "bin/MyExecutable")
#   SET(CPACK_SOURCE_STRIP_FILES "")
# ENDIF(WIN32 AND NOT UNIX)
# SET(CPACK_PACKAGE_EXECUTABLES "MyExecutable" "My Executable")
INCLUDE(CPACK)
