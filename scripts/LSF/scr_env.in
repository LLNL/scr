#!/usr/bin/perl -w
use strict;
use Getopt::Long qw/ :config gnu_getopt ignore_case /;
use lib '@X_DATADIR@/scr';
use scr_hostlist;

my $prog = "scr_env";

my $bin = "@X_BINDIR@";
my $scr_nodes_file = "$bin/scr_nodes_file";

sub print_usage
{
  print "\n";
  print "  Usage:  $prog [options]\n";
  print "\n";
  print "  Options:\n";
  print "    -u, --user     List the username of current job.\n";
  print "    -j, --jobid    List the job id of the current job.\n";
  print "    -n, --nodes    List the nodeset the current job is using.\n";
  print "    -d, --down     List any nodes of the job's nodeset that\n";
  print "                     the resource managers knows to be down.\n";
  print "    -p, --prefix   Specify the prefix directory.\n";
  print "    -r, --runnodes List the number of nodes used in the last run.\n";
  print "    -e, --endtime  List the end time of the job (secs since epoch).\n";
  print "    -f, --hostfile <hosts> Echo hostfile subtracting list of <hosts>.\n";
  print "\n";
  exit 1;
}

# read in the command line options
my %conf = ();
$conf{user}  = undef;
$conf{jobid} = undef;
$conf{nodes} = undef;
$conf{down}  = undef;
$conf{prefix}   = undef;
$conf{runnodes} = undef;
$conf{endtime}  = undef;
$conf{hostfile} = undef;
$conf{help}  = undef;
my $rc = GetOptions (
  "user|u"         => \$conf{user},
  "jobid|j"        => \$conf{jobid},
  "nodes|n"        => \$conf{nodes},
  "down|d"         => \$conf{down},
  "prefix|p=s"     => \$conf{prefix},
  "runnodes|r"     => \$conf{runnodes},
  "endtime|e"      => \$conf{endtime},
  "hostfile|f=s"   => \$conf{hostfile},
  "help|h"         => \$conf{help},
);
if ($conf{help} or not $rc) {
  print_usage();
}

if (defined $conf{user}) {
  # print the username of the current job
  if (defined $ENV{USER}) {
    print "$ENV{USER}\n";
  } else {
    exit 1;
  }
} elsif (defined $conf{jobid}) {
  # print the jobid of the current job
  if (defined $ENV{LSB_JOBID}) {
    print "$ENV{LSB_JOBID}\n";
  } else {
    # failed to read jobid from environment,
    # assume user is running in test mode
    print "defjobid\n";
  }
} elsif (defined $conf{nodes}) {
  # print the nodeset of the current job in 'atlas[30-33,35,45-53]' form
  if (defined $ENV{LSB_DJOB_HOSTFILE}) {
    # LSB_HOSTS would be easier, but it gets truncated at some limit
    # only reliable way to build this list is to process file specified
    # by LSB_DJOB_HOSTFILE

    # get the file name and read the file
    my $hostfile = $ENV{LSB_DJOB_HOSTFILE};
    my $hoststr = "";
    if (-r $hostfile) {
      # got a file, try to read it
      $hoststr = `cat $hostfile`;
      if ($? != 0) {
        # failed to read file
        exit 1;
      }
    }

    # build set of unique hostnames, one hostname per line
    chomp $hoststr;
    my @hosts = split('\n', $hoststr);
    my %hosts_unique;
    foreach my $host (@hosts) {
      $hosts_unique{$host} = 1;
    }

    # compress list and print it
    my $hostlist = scr_hostlist::compress(keys %hosts_unique);
    print "$hostlist\n";
  } elsif (defined $ENV{LSB_HOSTS}) {
    my $hostlist = scr_hostlist::compress($ENV{LSB_HOSTS});
    print "$hostlist\n";
    # or, with jobid: squeue -j <jobid> -ho %N
  } else {
    exit 1;
  }
} elsif (defined $conf{hostfile}) {
  # get list of down nodes
  my @downlist = scr_hostlist::expand($conf{hostfile});
  my %downhosts;
  foreach my $host (@downlist) {
    $downhosts{$host} = 1;
  }
  if (defined $ENV{LSB_DJOB_HOSTFILE}) {
    # LSB_HOSTS would be easier, but it gets truncated at some limit
    # only reliable way to build this list is to process file specified
    # by LSB_DJOB_HOSTFILE

    # get the file name and read the file
    my $hostfile = $ENV{LSB_DJOB_HOSTFILE};
    my $hoststr = "";
    if (-r $hostfile) {
      # got a file, try to read it
      $hoststr = `cat $hostfile`;
      if ($? != 0) {
        # failed to read file
        exit 1;
      }
    }

    # build set of unique hostnames, one hostname per line
    chomp $hoststr;
    my @hosts = split('\n', $hoststr);
    foreach my $host (@hosts) {
      if (not exists $downhosts{$host}) {
        print "$host\n";
      }
    }
  } else {
    exit 1;
  }
} elsif (defined $conf{down}) {
  # if the resource manager knows any nodes to be down out of the job's
  # nodeset, print this list in 'atlas[30-33,35,45-53]' form
  # if there are none, print nothing, not even a newline
  if (defined $ENV{LSB_HOSTS}) {
    # TODO: any way to get list of down nodes in LSF?

    #my $nodeset = $ENV{SLURM_NODELIST};
    #my $down = `sinfo -ho \%N -t down -n $nodeset`;
    #if ($? == 0) {
    #  chomp $down;
    #  if ($down ne "") {
    #    print "$down\n";
    #  }
    #}
  } else {
    exit 1;
  }
} elsif (defined $conf{runnodes} and defined $conf{prefix}) {
  # read the nodes file to determine how many nodes the last job ran with
  my $nodes = `$scr_nodes_file --dir $conf{prefix}`;
  if ($? == 0) {
    chomp $nodes;
    print "$nodes\n";
    exit 0;
  } else {
    # had a problem executing scr_nodes_file command
    print "0\n";
    exit 1;
  }
} elsif (defined $conf{endtime}) {
  # query bjobs to get time remaining and add to current time
  my $curtime = time();
  my $bjobs = `bjobs -o 'time_left'`;
  if ($? == 0) {
    my @lines = split("\n", $bjobs);
    foreach my $line (@lines) {
      if ($line =~ /^\s*(\d+):(\d+)\s+/) {
        # the following is printed if there is a limit
        #   bjobs -o 'time_left'
        #   TIME_LEFT
        #   0:12 L
        # look for a line like "0:12 L",
        # avoid matching the "L" since other characters can show up there
        my $hours = $1;
        my $mins  = $2;
        my $secs = $curtime + (($hours * 60) + $mins) * 60;
        print "$secs\n";
        exit 0;
      }
      if ($line =~ /^\-/) {
        # the following is printed if there is no limit
        #   bjobs -o 'time_left'
        #   TIME_LEFT
        #   -
        # look for the "-", in this case,
        # return -1 to indicate there is no limit
        my $secs = -1;
        print "$secs\n";
        exit 0;
      }
    }
  }
  # had a problem executing bjobs command
  print "0\n";
  exit 1;
} else {
  # did not specify and option, print the usage
  print_usage();
}

exit 0;
