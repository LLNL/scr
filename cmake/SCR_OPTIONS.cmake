# Mac rpath Policy
IF(POLICY CMP0042)
    CMAKE_POLICY(SET CMP0042 NEW)
ENDIF(POLICY CMP0042)
SET(CMAKE_MACOSX_RPATH ON)

# Linux rpath settings
SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Enable -Wall by default
SET(CMAKE_C_FLAGS "-Wall ${CMAKE_C_FLAGS}")

# force debug flags to be "-g -O0" instead of "-g"
SET(CMAKE_C_FLAGS_DEBUG   "-g -O0")
SET(CMAKE_CXX_FLAGS_DEBUG "-g -O0")

# Configuration Options
OPTION(BUILD_SHARED_LIBS "Whether to build shared libraries" ON)
MESSAGE(STATUS "BUILD_SHARED_LIBS: ${BUILD_SHARED_LIBS}")

IF(BUILD_SHARED_LIBS)
    OPTION(SCR_LINK_STATIC "Default to static linking? (Needed for Cray)" OFF)
ELSE()
    OPTION(SCR_LINK_STATIC "Default to static linking? (Needed for Cray)" ON)
ENDIF()
MESSAGE(STATUS "SCR_LINK_STATIC: ${SCR_LINK_STATIC}")

SET(SCR_RESOURCE_MANAGER "SLURM" CACHE STRING "Resource Manager for CLI (SLURM APRUN PMIX LSF NONE)")
SET_PROPERTY(CACHE SCR_RESOURCE_MANAGER PROPERTY STRINGS SLURM APRUN PMIX LSF NONE)
LIST(APPEND RMS SLURM APRUN PMIX LSF NONE)
LIST(FIND RMS ${SCR_RESOURCE_MANAGER} _index)
IF(${_index} GREATER -1)
    MESSAGE(STATUS "SCR_RESOURCE_MANAGER: ${SCR_RESOURCE_MANAGER}")
ELSE()
    LIST(JOIN RMS ", " RMLIST)
    MESSAGE(FATAL_ERROR "SCR_RESOURCE_MANAGER: ${SCR_RESOURCE_MANAGER} is invalid, pick one of: ${RMLIST}")
ENDIF()

OPTION(ENABLE_IBM_BBAPI "Whether to enable IBM Burst Buffer support" ON)
MESSAGE(STATUS "ENABLE_IBM_BBAPI: ${ENABLE_IBM_BBAPI}")

OPTION(ENABLE_CRAY_DW "Whether to enable Cray Datawarp support" OFF)
MESSAGE(STATUS "ENABLE_CRAY_DW: ${ENABLE_CRAY_DW}")

OPTION(ENABLE_INTEL_CPPR "Whether to enable Intel CPPR support" OFF)
MESSAGE(STATUS "ENABLE_INTEL_CPPR: ${ENABLE_INTEL_CPPR}")

SET(SCR_CACHE_BASE "/dev/shm" CACHE PATH "Default base path for SCR cache directory")
SET(SCR_CNTL_BASE "/dev/shm" CACHE PATH "Default base path for SCR control directory")
SET(SCR_CONFIG_FILE "/etc/scr/scr.conf" CACHE FILEPATH "Default full path and filename for SCR config file")
MESSAGE(STATUS "SCR_CACHE_BASE: ${SCR_CACHE_BASE}")
MESSAGE(STATUS "SCR_CNTL_BASE: ${SCR_CNTL_BASE}")
MESSAGE(STATUS "SCR_CONFIG_FILE: ${SCR_CONFIG_FILE}")

LIST(APPEND BINARYVALS 0 1)

SET(SCR_LOG_ENABLE "0" CACHE STRING "Whether to enable logging of any type (1) or not (0)")
SET_PROPERTY(CACHE SCR_LOG_ENABLE PROPERTY STRINGS 0 1)
LIST(FIND BINARYVALS ${SCR_LOG_ENABLE} _index)
IF(${_index} GREATER -1)
    MESSAGE(STATUS "SCR_LOG_ENABLE: ${SCR_LOG_ENABLE}")
ELSE()
    MESSAGE(FATAL_ERROR "SCR_LOG_ENABLE: ${SCR_LOG_ENABLE} is invalid, pick one of: 0, 1")
ENDIF()

SET(SCR_LOG_TXT_ENABLE "1" CACHE STRING "Whether to enable text file logging (1) or not (0)")
SET_PROPERTY(CACHE SCR_LOG_TXT_ENABLE PROPERTY STRINGS 0 1)
LIST(FIND BINARYVALS ${SCR_LOG_TXT_ENABLE} _index)
IF(${_index} GREATER -1)
    MESSAGE(STATUS "SCR_LOG_TXT_ENABLE: ${SCR_LOG_TXT_ENABLE}")
ELSE()
    MESSAGE(FATAL_ERROR "SCR_LOG_TXT_ENABLE: ${SCR_LOG_TXT_ENABLE} is invalid, pick one of: 0, 1")
ENDIF()

SET(SCR_LOG_SYSLOG_ENABLE "1" CACHE STRING "Whether to enable syslog logging (1) or not (0)")
SET_PROPERTY(CACHE SCR_LOG_SYSLOG_ENABLE PROPERTY STRINGS 0 1)
LIST(FIND BINARYVALS ${SCR_LOG_SYSLOG_ENABLE} _index)
IF(${_index} GREATER -1)
    MESSAGE(STATUS "SCR_LOG_SYSLOG_ENABLE: ${SCR_LOG_SYSLOG_ENABLE}")
ELSE()
    MESSAGE(FATAL_ERROR "SCR_LOG_SYSLOG_ENABLE: ${SCR_LOG_SYSLOG_ENABLE} is invalid, pick one of: 0, 1")
ENDIF()

SET(SCR_LOG_SYSLOG_PREFIX "SCR" CACHE STRING "String to use as prefix on all syslog messages")
SET(SCR_LOG_SYSLOG_FACILITY "LOG_LOCAL7" CACHE STRING "Facility to use on syslog messages (see man openlog)")
SET(SCR_LOG_SYSLOG_LEVEL "LOG_INFO" CACHE STRING "Level to use on all syslog messages (see man openlog)")
MESSAGE(STATUS "SCR_LOG_SYSLOG_PREFIX: ${SCR_LOG_SYSLOG_PREFIX}")
MESSAGE(STATUS "SCR_LOG_SYSLOG_FACILITY: ${SCR_LOG_SYSLOG_FACILITY}")
MESSAGE(STATUS "SCR_LOG_SYSLOG_LEVEL: ${SCR_LOG_SYSLOG_LEVEL}")

SET(SCR_FILE_LOCK "FLOCK" CACHE STRING "Specify type of file locking to use (FLOCK FCNTL NONE)")
SET_PROPERTY(CACHE SCR_FILE_LOCK PROPERTY STRINGS FLOCK FCNTL NONE)
LIST(APPEND FILELOCKS FLOCK FCNTL NONE)
LIST(FIND FILELOCKS ${SCR_FILE_LOCK} _index)
IF(${_index} GREATER -1)
    MESSAGE(STATUS "SCR_FILE_LOCK: ${SCR_FILE_LOCK}")
ELSE()
    LIST(JOIN FILELOCKS ", " FILELOCKLIST)
    MESSAGE(FATAL_ERROR "SCR_FILE_LOCK: ${SCR_FILE_LOCK} is invalid, pick one of: ${FILELOCKLIST}")
ENDIF()

OPTION(SCR_BGQ "Enable proper BGQ compilation" OFF)
MESSAGE(STATUS "SCR_BGQ: ${SCR_BGQ}")

OPTION(ENABLE_FORTRAN "Turn Fortran Support ON/OFF" ON)
MESSAGE(STATUS "ENABLE_FORTRAN: ${ENABLE_FORTRAN}")
IF(ENABLE_FORTRAN)
    SET(HAVE_FORTRAN_API TRUE)
    ENABLE_LANGUAGE(Fortran)
ENDIF(ENABLE_FORTRAN)

SET(ENABLE_FORTRAN_TRAILING_UNDERSCORES AUTO CACHE STRING "Turn use of trainling underscores for Fortran subroutines ON/OFF")
SET_PROPERTY(CACHE ENABLE_FORTRAN_TRAILING_UNDERSCORES PROPERTY STRINGS AUTO ON OFF)
MESSAGE(STATUS "ENABLE_FORTRAN_TRAILING_UNDERSCORES: ${ENABLE_FORTRAN_TRAILING_UNDERSCORES}")
IF(ENABLE_FORTRAN_TRAILING_UNDERSCORES STREQUAL "AUTO")
	SET(USE_FORTRAN_TRAILING_UNDERSCORES)
ELSE(ENABLE_FORTRAN_TRAILING_UNDERSCORES STREQUAL "AUTO")
        IF(${ENABLE_FORTRAN_TRAILING_UNDERSCORES})
		SET(USE_FORTRAN_TRAILING_UNDERSCORES 1)
        ELSE(${ENABLE_FORTRAN_TRAILING_UNDERSCORES})
		SET(USE_FORTRAN_TRAILING_UNDERSCORES 0)
        ENDIF(${ENABLE_FORTRAN_TRAILING_UNDERSCORES})
ENDIF(ENABLE_FORTRAN_TRAILING_UNDERSCORES STREQUAL "AUTO")

OPTION(ENABLE_YOGRT "Enable use of yogrt" ON)
MESSAGE(STATUS "ENABLE_YOGRT: ${ENABLE_YOGRT}")

OPTION(ENABLE_MYSQL "Enable use of mysql" OFF)
MESSAGE(STATUS "ENABLE_MYSQL: ${ENABLE_MYSQL}")

OPTION(ENABLE_PDSH "Enable use of pdsh" ON)
MESSAGE(STATUS "ENABLE_PDSH: ${ENABLE_PDSH}")
IF(ENABLE_PDSH)
    OPTION(BUILD_PDSH "Download and build the PDSH Library?" OFF)
    MESSAGE(STATUS "BUILD_PDSH: ${BUILD_PDSH}")
ENDIF(ENABLE_PDSH)

OPTION(ENABLE_TESTS "Build tests" ON)
MESSAGE(STATUS "ENABLE_TESTS: ${ENABLE_TESTS}")

OPTION(ENABLE_EXAMPLES "Build examples" ON)
MESSAGE(STATUS "ENABLE_EXAMPLES: ${ENABLE_EXAMPLES}")
